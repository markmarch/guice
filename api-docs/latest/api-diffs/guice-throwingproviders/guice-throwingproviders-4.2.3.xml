<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Wed Jan 27 00:20:33 UTC 2021 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="guice-throwingproviders-4.2.3"
  jdversion="1.0.9">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /home/runner/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/home/runner/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/home/runner/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/home/runner/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -doclet jdiff.JDiff -docletpath /home/runner/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/home/runner/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/home/runner/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/home/runner/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -apiname guice-throwingproviders-4.2.3 -apidir /home/runner/work/guice/guice/extensions/throwingproviders/target/site/api-diffs/guice-throwingproviders -classpath /home/runner/.m2/repository/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.jar:/home/runner/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/runner/.m2/repository/com/google/inject/guice/4.2.3/guice-4.2.3.jar:/home/runner/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar:/home/runner/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/home/runner/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/runner/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/runner/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar:/home/runner/.m2/repository/com/google/guava/guava/27.1-jre/guava-27.1-jre.jar:/home/runner/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar:/home/runner/.m2/repository/com/google/inject/extensions/guice-throwingproviders/4.2.3/guice-throwingproviders-4.2.3.jar:/home/runner/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar -sourcepath /tmp/jdiff6152407975666971919/guice-throwingproviders/4.2.3/sources -->
<package name="com.google.inject.throwingproviders">
  <!-- start interface com.google.inject.throwingproviders.CheckedProvider -->
  <interface name="CheckedProvider"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[Alternative to the Guice {@link com.google.inject.Provider} that throws a checked Exception.
 Users may not inject {@code T} directly.

 <p>This interface must be extended to use application-specific exception types. Such
 subinterfaces may not define new methods, but may narrow the exception type.

 <pre>
 public interface RemoteProvider&lt;T&gt; extends CheckedProvider&lt;T&gt; {
   T get() throws CustomExceptionOne, CustomExceptionTwo;
 }
 </pre>

 <p>When this type is bound using {@link ThrowingProviderBinder}, the value returned or exception
 thrown by {@link #get} will be scoped. As a consequence, {@link #get} will invoked at most once
 within each scope.

 @since 3.0]]>
    </doc>
  </interface>
  <!-- end interface com.google.inject.throwingproviders.CheckedProvider -->
  <!-- start class com.google.inject.throwingproviders.CheckedProviders -->
  <class name="CheckedProviders" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="of" return="com.google.inject.throwingproviders.CheckedProvider"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="providerType" type="com.google.inject.TypeLiteral"/>
      <param name="instance" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns a {@link CheckedProvider} which always provides {@code instance}.

 <p>The provider type passed as {@code providerType} must be an interface. Calls to methods
 other than {@link CheckedProvider#get} will throw {@link UnsupportedOperationException}.

 @param providerType the type of the {@link CheckedProvider} to return
 @param instance the instance that should always be provided]]>
      </doc>
    </method>
    <method name="of" return="com.google.inject.throwingproviders.CheckedProvider"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="providerType" type="java.lang.Class"/>
      <param name="instance" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns a {@link CheckedProvider} which always provides {@code instance}.

 @param providerType the type of the {@link CheckedProvider} to return
 @param instance the instance that should always be provided
 @see #of(TypeLiteral, T)]]>
      </doc>
    </method>
    <method name="throwing" return="com.google.inject.throwingproviders.CheckedProvider"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="providerType" type="com.google.inject.TypeLiteral"/>
      <param name="throwable" type="java.lang.Class"/>
      <doc>
      <![CDATA[Returns a {@link CheckedProvider} which always throws exceptions.

 <p>This method uses the nullary (no argument) constructor of {@code throwable} to create a new
 instance of the given {@link Throwable} on each method invocation which is then thrown
 immediately.

 <p>See {@link #of(TypeLiteral, T)} for more information.

 @param providerType the type of the {@link CheckedProvider} to return
 @param throwable the type of the {@link Throwable} to throw
 @see #of(TypeLiteral, T)]]>
      </doc>
    </method>
    <method name="throwing" return="com.google.inject.throwingproviders.CheckedProvider"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="providerType" type="java.lang.Class"/>
      <param name="throwable" type="java.lang.Class"/>
      <doc>
      <![CDATA[Returns a {@link CheckedProvider} which always throws exceptions.

 @param providerType the type of the {@link CheckedProvider} to return
 @param throwable the type of the {@link Throwable} to throw
 @see #throwing(TypeLiteral, Class)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static utility methods for creating and working with instances of {@link CheckedProvider}.

 @author eatnumber1@google.com (Russ Harmon)
 @since 4.2]]>
    </doc>
  </class>
  <!-- end class com.google.inject.throwingproviders.CheckedProviders -->
  <!-- start interface com.google.inject.throwingproviders.CheckedProvides -->
  <interface name="CheckedProvides"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="value" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The interface that provides this value, a subinterface of {@link CheckedProvider}.]]>
      </doc>
    </method>
    <method name="scopeExceptions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether exceptions should be put into the Guice scope. Default behavior is that exceptions are
 scoped.

 @since 4.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Annotates methods of a {@link com.google.inject.Module} to create a {@link CheckedProvider}
 method binding that can throw exceptions. The method's return type is bound to a {@link
 CheckedProvider} that can be injected. Guice will pass dependencies to the method as parameters.
 Install {@literal @}CheckedProvides methods by using {@link
 ThrowingProviderBinder#forModule(com.google.inject.Module)} on the module where the methods are
 declared.

 @author sameb@google.com (Sam Berlin)
 @since 3.0]]>
    </doc>
  </interface>
  <!-- end interface com.google.inject.throwingproviders.CheckedProvides -->
  <!-- start interface com.google.inject.throwingproviders.ThrowingInject -->
  <interface name="ThrowingInject"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[A version of {@literal @}{@link Inject} designed for ThrowingProviders. Use by:

 <pre><code>ThrowingProviderBinder.create(binder())
    .bind(RemoteProvider.class, Customer.class)
    .providing(CustomerImpl.class);
 </code></pre>

 where CustomerImpl has a constructor annotated with ThrowingInject.

 @author sameb@google.com (Sam Berlin)
 @since 4.0]]>
    </doc>
  </interface>
  <!-- end interface com.google.inject.throwingproviders.ThrowingInject -->
  <!-- start interface com.google.inject.throwingproviders.ThrowingProvider -->
  <interface name="ThrowingProvider"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="use {@link CheckedProvider} instead.">
    <implements name="com.google.inject.throwingproviders.CheckedProvider"/>
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[Alternative to the Guice {@link com.google.inject.Provider} that throws a checked Exception.
 Users may not inject {@code T} directly.

 <p>This interface must be extended to use application-specific exception types. Such
 subinterfaces may not define new methods:

 <pre>
 public interface RemoteProvider&lt;T&gt; extends ThrowingProvider&lt;T, RemoteException&gt; { }
 </pre>

 <p>When this type is bound using {@link ThrowingProviderBinder}, the value returned or exception
 thrown by {@link #get} will be scoped. As a consequence, {@link #get} will invoked at most once
 within each scope.

 @author jmourits@google.com (Jerome Mourits)
 @author jessewilson@google.com (Jesse Wilson)
 @deprecated use {@link CheckedProvider} instead.]]>
    </doc>
  </interface>
  <!-- end interface com.google.inject.throwingproviders.ThrowingProvider -->
  <!-- start class com.google.inject.throwingproviders.ThrowingProviderBinder -->
  <class name="ThrowingProviderBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="create" return="com.google.inject.throwingproviders.ThrowingProviderBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binder" type="com.google.inject.Binder"/>
    </method>
    <method name="forModule" return="com.google.inject.Module"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="module" type="com.google.inject.Module"/>
      <doc>
      <![CDATA[Returns a module that installs {@literal @}{@link CheckedProvides} methods.

 @since 3.0]]>
      </doc>
    </method>
    <method name="bind" return="com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use {@link #bind(Class, Class)} or {@link #bind(Class, TypeLiteral)} instead.">
      <param name="interfaceType" type="java.lang.Class"/>
      <param name="clazz" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[@deprecated Use {@link #bind(Class, Class)} or {@link #bind(Class, TypeLiteral)} instead.]]>
      </doc>
    </method>
    <method name="bind" return="com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="interfaceType" type="java.lang.Class"/>
      <param name="clazz" type="java.lang.Class"/>
      <doc>
      <![CDATA[@since 4.0]]>
      </doc>
    </method>
    <method name="bind" return="com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="interfaceType" type="java.lang.Class"/>
      <param name="typeLiteral" type="com.google.inject.TypeLiteral"/>
      <doc>
      <![CDATA[@since 4.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builds a binding for a {@link CheckedProvider}.

 <p>You can use a fluent API and custom providers:

 <pre><code>ThrowingProviderBinder.create(binder())
    .bind(RemoteProvider.class, Customer.class)
    .to(RemoteCustomerProvider.class)
    .in(RequestScope.class);
 </code></pre>

 or, you can use throwing provider methods:

 <pre><code>class MyModule extends AbstractModule {
   configure() {
     install(ThrowingProviderBinder.forModule(this));
   }

   {@literal @}CheckedProvides(RemoteProvider.class)
   {@literal @}RequestScope
   Customer provideCustomer(FlakyCustomerCreator creator) throws RemoteException {
     return creator.getCustomerOrThrow();
   }
 }
 </code></pre>

 You also can declare that a CheckedProvider construct a particular class whose constructor throws
 an exception:

 <pre><code>ThrowingProviderBinder.create(binder())
    .bind(RemoteProvider.class, Customer.class)
    .providing(CustomerImpl.class)
    .in(RequestScope.class);
 </code></pre>

 @author jmourits@google.com (Jerome Mourits)
 @author jessewilson@google.com (Jesse Wilson)
 @author sameb@google.com (Sam Berlin)]]>
    </doc>
  </class>
  <!-- end class com.google.inject.throwingproviders.ThrowingProviderBinder -->
  <!-- start class com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder -->
  <class name="ThrowingProviderBinder.SecondaryBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SecondaryBinder" type="java.lang.Class, java.lang.reflect.Type"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="annotatedWith" return="com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotationType" type="java.lang.Class"/>
    </method>
    <method name="annotatedWith" return="com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotation" type="java.lang.annotation.Annotation"/>
    </method>
    <method name="scopeExceptions" return="com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scopeExceptions" type="boolean"/>
      <doc>
      <![CDATA[Determines if exceptions should be scoped. By default exceptions are scoped.

 @param scopeExceptions whether exceptions should be scoped.
 @since 4.0]]>
      </doc>
    </method>
    <method name="to" return="com.google.inject.binder.ScopedBindingBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="com.google.inject.throwingproviders.CheckedProvider"/>
    </method>
    <method name="to" return="com.google.inject.binder.ScopedBindingBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="targetType" type="java.lang.Class"/>
    </method>
    <method name="providing" return="com.google.inject.binder.ScopedBindingBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cxtorClass" type="java.lang.Class"/>
      <doc>
      <![CDATA[@since 4.0]]>
      </doc>
    </method>
    <method name="providing" return="com.google.inject.binder.ScopedBindingBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cxtorLiteral" type="com.google.inject.TypeLiteral"/>
      <doc>
      <![CDATA[@since 4.0]]>
      </doc>
    </method>
    <method name="to" return="com.google.inject.binder.ScopedBindingBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="targetKey" type="com.google.inject.Key"/>
    </method>
  </class>
  <!-- end class com.google.inject.throwingproviders.ThrowingProviderBinder.SecondaryBinder -->
</package>

</api>
