<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Wed Jan 27 00:17:30 UTC 2021 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="guice-dagger-adapter-5.0.1-SNAPSHOT"
  jdversion="1.0.9">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /home/runner/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/home/runner/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/home/runner/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/home/runner/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -doclet jdiff.JDiff -docletpath /home/runner/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/home/runner/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/home/runner/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/home/runner/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -apiname guice-dagger-adapter-5.0.1-SNAPSHOT -apidir /home/runner/work/guice/guice/extensions/dagger-adapter/target/site/api-diffs/guice-dagger-adapter -classpath /home/runner/.m2/repository/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.jar:/home/runner/.m2/repository/com/google/inject/guice/5.0.1-SNAPSHOT/guice-5.0.1-SNAPSHOT.jar:/home/runner/.m2/repository/org/checkerframework/checker-qual/2.5.2/checker-qual-2.5.2.jar:/home/runner/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/runner/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/runner/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/runner/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/home/runner/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/runner/.m2/repository/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar:/home/runner/.m2/repository/com/google/guava/guava/27.1-jre/guava-27.1-jre.jar:/home/runner/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.17/animal-sniffer-annotations-1.17.jar:/home/runner/work/guice/guice/extensions/dagger-adapter/target/guice-dagger-adapter-5.0.1-SNAPSHOT.jar:/home/runner/.m2/repository/com/google/dagger/dagger/2.22.1/dagger-2.22.1.jar -sourcepath /tmp/jdiff3837584138885933386/guice-dagger-adapter/5.0.1-SNAPSHOT/sources -->
<package name="com.google.inject.daggeradapter">
  <!-- start class com.google.inject.daggeradapter.DaggerAdapter -->
  <class name="DaggerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="from" return="com.google.inject.Module"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="daggerModuleObjects" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Creates a new {@link DaggerAdapter} from {@code daggerModuleObjects}.]]>
      </doc>
    </method>
    <method name="builder" return="com.google.inject.daggeradapter.DaggerAdapter.Builder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Adapts classes annotated with {@link @dagger.Module} such that their {@link @dagger.Provides}
 methods can be properly invoked by Guice to perform their provision operations.

 <p>Simple example:

 <pre>{@code
 Guice.createInjector(
   DaggerAdapter.from(SomeDaggerModule.class, new AnotherModuleWithConstructor());
 }</pre>

 <p>For modules with no instance binding methods, prefer using a class literal. If there are
 instance binding methods, an instance of the module must be passed.

 <p>Any class literals specified by {@code dagger.Module(includes = ...)} transitively will be
 included. Modules are de-duplicated, though multiple module instances of the same type is an
 error. Specifying a module instance and a class literal is also an error.

 <p>Some notes on usage and compatibility.

 <ul>
   <li>Dagger provider methods have a "SET_VALUES" provision mode not supported by Guice.
   <li>MapBindings are not yet implemented (pending).
   <li>Be careful about stateful modules. In contrast to Dagger (where components are expected to
       be recreated on-demand with new Module instances), Guice typically has a single injector
       with a long lifetime, so your module instance will be used throughout the lifetime of the
       entire app.
   <li>Dagger 1.x uses {@link @Singleton} for all scopes, including shorter-lived scopes like
       per-request or per-activity. Using modules written with Dagger 1.x usage in mind may result
       in mis-scoped objects.
   <li>Dagger 2.x supports custom scope annotations, but for use in Guice, a custom scope
       implementation must be registered in order to support the custom lifetime of that
       annotation.
 </ul>

 <p>If methods need to be ignored based on a condtion, a {@code Predicate<Method>} can be used
 passed to {@link DaggerAdapter.Builder#filter}, as in {@code
 DaggerAdapter.builder().addModules(...).filter(predicate).build()}. Only the methods which
 satisfy the predicate will be processed.]]>
    </doc>
  </class>
  <!-- end class com.google.inject.daggeradapter.DaggerAdapter -->
  <!-- start class com.google.inject.daggeradapter.DaggerAdapter.Builder -->
  <class name="DaggerAdapter.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.inject.Module"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a module that will configure bindings based on the modules & scanners.]]>
      </doc>
    </method>
    <method name="addModules" return="com.google.inject.daggeradapter.DaggerAdapter.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="daggerModuleObjects" type="java.lang.Iterable"/>
      <doc>
      <![CDATA[Adds modules (which can be classes annotated with {@link dagger.Module}, or instances of
 those classes) which will be scanned for bindings.]]>
      </doc>
    </method>
    <method name="filter" return="com.google.inject.daggeradapter.DaggerAdapter.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="predicate" type="com.google.common.base.Predicate"/>
      <doc>
      <![CDATA[Limit the adapter to a subset of {@code methods} from {@link @dagger.Module} annotated
 classes which satisfy the {@code predicate}. Defaults to allowing all.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for setting configuration options on DaggerAdapter.]]>
    </doc>
  </class>
  <!-- end class com.google.inject.daggeradapter.DaggerAdapter.Builder -->
</package>

</api>
